grammar ctwedge.CTWedge with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore"
generate ctWedge "http://www.CtWedge.ctwedge"

CitModel:
	{CitModel} 'Model' name=ID 
	//list of parameters
	'Parameters' ':' (parameters+=Parameter)+ 
	// constraints
	('Constraints' ':' (constraints+=Constraint)+)?
;

Parameter:
	(Bool | Enumerative | Range) ';'?;

Bool:
	name=ID ':' 'Boolean';
	
Enumerative:
	name=ID (':' '{' elements+=Element (','? elements+=Element)* '}'); // elements in the enumerative

Element:
	name=elementID;

Range:
	name=ID ':' '[' begin=PossiblySignedNumber '..' end=PossiblySignedNumber ']' ('step' step=INT)?; //range of value of a constant

// CONSTRAINTS
// expressions defined in top down way starting from less precedence	
Constraint:
	('#' ImpliesExpression '#');

	// precedence:
// not, and, or, implies
ImpliesExpression returns Expression:
	OrExpression ({ImpliesExpression.left=current} (op=ImpliesOperator) right=OrExpression)*; // 
	
OrExpression returns Expression:
	AndExpression ({OrExpression.left=current} OR_OPERATOR (right=AndExpression))*;
		
AndExpression returns Expression:
	EqualExpression ({AndExpression.left=current} AND_OPERATOR (right=EqualExpression))*;
	
EqualExpression returns Expression:
	RelationalExpression ({EqualExpression.left=current} (op=EqualityOperators) (right=RelationalExpression))*;

RelationalExpression returns Expression:
	PlusMinus ({RelationalExpression.left=current} op=RelationalOperators right=PlusMinus)*;  // a<b<c? 

// numerical expressions
PlusMinus returns Expression:
	ModMultDiv ({PlusMinus.left=current} (op=PlusMinusOperators) right=ModMultDiv)*;

ModMultDiv returns Expression:
	Primary ({ModMultDiv.left=current} (op=ModMultDivOperators) (right=Primary))*;

Primary returns Expression:
	NotExpression | '(' ImpliesExpression ')' | AtomicPredicate;

NotExpression returns Expression:  //to add + - unary
	NOT_OPERATOR Primary ({NotExpression.predicate=current});

	// return an atomic predicate that cannot be further decomposed in predicates
AtomicPredicate:
	//v=[BoolTerm] | v=[Enumerative] | v=[RelationalExpression] | v=[Element] |
	boolConst=BoolConst | name=elementID ;
	//BoolAssign | EnumAssign | RelationalExpression;


	// only comparison 
enum RelationalOperators returns Operators:
	GT='>' | LT='<' | GE='>=' | LE='<=';

enum EqualityOperators returns Operators:
	EQ = '==' | NE='!='
	| EQ ='=' ;  // it gives a warning, but it works

	/*enum AndOperators:
	and='&&' | andmi='and' | ANDma='AND';
enum OrOperators:
	or='||' | ormi='or' | ORma='OR'; */
	

OR_OPERATOR:
	'||' | 'or' | 'OR' | '|';

AND_OPERATOR:
	'&&' | 'and' | 'AND' | '&';

NOT_OPERATOR:
	'!' | 'not';


enum PlusMinusOperators:
	Plus='+' | Minus='-';

enum ModMultDivOperators:
	Mod='%' | Mult='*' | Div='/';

enum ImpliesOperator:
	Impl ='=>' | Iff='<=>' | 
	Impl ='->' | Iff='<->'; // it gives a warning, but it works

BoolConst:
	'false' | 'true' | 'FALSE' | 'TRUE';
	
elementID returns EString:
	ID | NUMID | STRING | '-'? INT;

// NUMID: 
// elements can be a number followed by an ID like 16MP
	
terminal NUMID returns EString:
	('0'..'9')+ ID ;

PossiblySignedNumber returns EIntegerObject:
	'-'? INT;
	
